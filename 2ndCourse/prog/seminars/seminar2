seminar1

Что напечатает следующая программа. Ответ записывается с учетом строки 
форматирования, указанной при вызове функции printf.
#include <stdio.h>
int main(void)
{
    int a[] = {0, 1, 2, 3, 4};
    int i, *p;
    for (p = &a[0]; p <= &a[4]; p++)
        printf("%d ", *p);
    // 0 1 2 3 4
    printf("\n");
    for (p = a + 4, i = 0; i <= 4; i++)
        printf("%d ", p[-i]);
    // 4 3 2 1 0
    printf("\n");
    for (p = a, i = 0; p + i <= a + 4; i++)
        printf("%d ", *(p + i));
    // 0 1 2 3 4
    printf("\n");
    for (p = a + 4; p >= a; p--)
        printf("%d ", a[p - a]);
    // 4 3 2 1 0
    printf("\n");
    return 0;
}

Пусть задан массив
int arr[10];
Что тогда означают выражения?
&arr[2]           +адрес элемента с индексом 2
arr[2]            +значение элемента с индексом 2
arr + 2           +адрес на элемент с индексом 2         
arr               +адрес на элемент с индексом 0
arr[0]            +значение элемента с индексом 0
*arr + 2          +значение элемента с индексом 0  +2         
*(arr + 2)        +значение элемента с индексом 2
*arr              +значение элемента с индексом 0

Дан фрагмент текста программы
int a[] = {0, 1, 2};
int *b = a + 1;
Чему равны значения выражений?
b[-1]     // 0
b[2]      // неизвестно


Дан фрагмент текста программы
int a[] = {0, 1, 2};
int *b = a + 1;
Какие из операторов приведенных ниже скомпилируются?
Выберите один или несколько ответов:
a. a = b;     // no
b. a++;       // no
c. b++;       // yes
d. b = a;     // yes


Чему будут равны значения переменных? Предположим, что переменная i располагается в памяти по адресу 100, j – 104, k – 108.

int main(void)
{
    int i = 10, j = 14, k;
    int *p = &i;
    // p = 100
    int *q = &j;
    // q = 104
    *p += 1;
    // изменится переменная i=11
    p = &k;
    // p = 108
    *p = *q;
    // изменится переменная k=14
    p = q;
    // p = 104
    *p = *q;
    // изменится переменная j=14
    return 0;
}




seminar2

int zippo [4][2] - массив из 4х элементов типа int[2]
zippo           int(*)[2]  адрес нулевой строки
zippo+2         int(*)[2]  адрес второй строки
*(zippo+2)      int*       адрес нулевого элемента второй строки
*(zippo+2)+1    int*       адрес первого элемента второй строки
*(*(zippo+2)+1) int        первый элемент второй строки


определены следующие переменные
int *pt; 		указатель на int
int (*pa)[3];   указатель на массив из 3х элементов
int ar1[2][3];	массив из 2х элементов типа int[3]
int ar2[3][2];	массив из 3х элементов типа int[2]
int **p2;  		указатель на указатель на int
скомпилируется ли
pt = &ar1[0][0]; +
pt = ar1[0];  	 +
pt = ar1;		 -	
pa = ar1; 		 +
pa = ar2;		 -
p2 = &pt;		 +
*p2 = ar2[0];	 +
p2 = ar2;		 -


int *ptr; 						указатель на int
int torf[2][2] = {12,14,16};	массив из 2х элементов типа int[2]
ptr = torf[0];
какое значение имеет выражение
*prt 			12			
*(prt+2)		16


int (*ptr)[2];
int fort[2][2] = {{12},{14,16}};
ptr = fort;
какое значение имеет выражение
**prt 		   12
**(ptr+1) 	   14


что будет выведено на экран в результате выполнения программы
#include <stdio.h>
int main(void)
{
	int a[0] = {0,1,2,3,4};
	int *p[] = {a,a+1,a+2,a+3,a+4};
	int **pp = p;
	printf("%d %d\n", a, *a); 		 // адрес_массива_а 0
	printf("%d %d %d\n", p, *p, **p);	 // адрес массива_р адрес_массива_а 0
	printf("%d %d %d \n", pp, *pp, **pp);	 // адрес_массива_р адрес_массива_а 0
	pp++;
	printf("%d %d %d\n", pp-p, *pp-a, **pp); // 1 1 1
	*pp++;
	printf("%d %d %d\n", pp-p, *pp-a, **pp); // 2 2 2
	*++pp;
	printf("%d %d %d\n", pp-p, *pp-a, **pp); // 3 3 3
	++*pp;
	printf("%d %d %d\n", pp-p, *pp-a, **pp); // 3 4 4
	pp = p;
	*(*(pp++));
	printf("%d %d %d\n", pp-p, *pp-a, **pp); // 1 1 1
	*(++(*pp));
	printf("%d %d %d\n", pp-p, *pp-a, **pp); // 1 2 2
	++(*(*pp));
	printf("%d %d %d\n", pp-p, *pp-a, **pp); // 1 2 3
	
	

		
}







