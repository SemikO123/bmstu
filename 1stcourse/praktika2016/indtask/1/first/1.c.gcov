        -:    0:Source:1.c
        -:    0:Graph:1.gcno
        -:    0:Data:1.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#define errempty -1
        -:    3:#define errnonum -2
        -:    4:
        -:    5:int s;
        -:    6:
        -:    7:/**
        -:    8: * @brief counter
        -:    9: * This function determines the change in the sequence of the mark between two numbers X and Y
        -:   10: * @param[in] x
        -:   11: * @param[in] y
        -:   12: * @return 1 if mark is changing, 0 if mark isn't changing.
        -:   13: */
        -:   14:int counter(int x, int y);
        -:   15:
        -:   16:/**
        -:   17: * @brief process
        -:   18: * This function shows the result
        -:   19: * @param[in] in
        -:   20: * @param[in] s count of mark changing
        -:   21: * @return 0 or error
        -:   22: */
        -:   23:int process(FILE *in,int *s);
        -:   24:
        -:   25:
        6:   26:int main(void)
        -:   27:{
        6:   28:    switch(process(stdin,&s))
        -:   29:    {
        -:   30:        case 0:
        4:   31:            fprintf(stdout,"Mark of sequence is changing %d times",s);
        4:   32:            break;
        -:   33:        case errempty:
        1:   34:            fprintf(stderr,"Empty input");
        1:   35:            break;
        -:   36:        case errnonum:
        1:   37:            fprintf(stderr,"Can't get the numbers");
        1:   38:            break;
        -:   39:    }
        6:   40:    return 0;
        -:   41:}
        -:   42:
        6:   43:int process(FILE *in,int *s)
        -:   44:{
        -:   45:    int first,second;
        6:   46:    puts("Input numbers:");
        6:   47:    switch (fscanf(in,"%d",&first))
        -:   48:    {
        -:   49:        case -1:
        1:   50:            return errempty;
        -:   51:        case 0:
        1:   52:            return errnonum;
        -:   53:    }
        4:   54:    *s = 0;
       17:   55:    while(fscanf(in,"%d",&second) == 1)
        -:   56:    {
        -:   57:        //printf("f %d s %d result %d\n",first,second,counter(first,second));
        9:   58:        *s = *s + counter(first,second);
        9:   59:        first = second;
        -:   60:    }
        4:   61:    return 0;
        -:   62:
        -:   63:}
        -:   64:
        9:   65:int counter(int x, int y)
        -:   66:{
        9:   67:    if (x*y < 0)
        3:   68:        return 1;
        -:   69:    else //x*y >= 0
        -:   70:    {
        -:   71:        //assert(x*y != 0)
        6:   72:        if (x*y > 0)
        4:   73:            return 0;
        -:   74:        else
        -:   75:        {
        2:   76:            if ((x==0 && y<0)==1 || (y==0 && x<0)==1)
        1:   77:                    return 1;
        -:   78:            else
        1:   79:                return 0;
        -:   80:        }
        -:   81:    }
        -:   82:}
